
type User @model 
@auth(rules: [
  
  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },

]) {
  id: ID!
  
  ## Some fields
  firstName: String!
  lastName: String!
  

  ## Wallet amounts here
  availableBalance: Float
  pendingBalance: Float

  ## Images
  backgroundImage: ImagePath @connection
  profileImage: ImagePath @connection

  ## Attachments
  establishments: [EstablishmentTibi] @connection(keyName: "byUser", fields: ["id"])
}


enum ImageLocation {
  system
  assets
  remote
  s3
}

enum EstablishmentType {
  hotel
  custom
}


type ImagePath @model
@auth(rules: [
  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },
]) {
  key: String!
  location: ImageLocation!
}

type Occupation @model
@key(name: "byEstablishment", fields: ["establishmentId", "name"])
@auth(rules: [

  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },
]) {
  id: ID!
  establishmentId: ID
  name: String!

  backgroundImage: ImagePath! @connection
}


type Establishment @model
@auth(rules: [
  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },
]) {
  id: ID!

  ## Name for establishment
  name: String!

  ## This is either sole-proprieter or organization
  type: EstablishmentType!


  imageUrl: AWSURL
  website: AWSURL

  

  tibis: [EstablishmentTibi] @connection(keyName: "byEstablishment", fields: ["id"])
  occupations: [Occupation] @connection(keyName: "byEstablishment", fields: ["id"])
}


type EstablishmentTibi
@model(queries: null)
@key(name: "byEstablishment", fields: ["establishmentId", "userId"])
@key(name: "byUser", fields: ["userId", "establishmentId"])
@auth(rules: [
  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },
]) {
  id: ID!
  userId: ID!
  establishmentId: ID!
  establishment: Establishment! @connection(fields: ["establishmentId"])
  user: User! @connection(fields: ["userId"])
  roles: [String]!
}






# Payments
enum PaymentType {
  credit
  debit
  applePay
  crypto
}

type Wallet @model 
@auth(rules: [
  
  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },

]) {
  id: ID!
  
  cryptoHash: String
  cryptoBalance: String

  payments: [Payment] @connection(keyName: "byWallet", fields: ["id"])
}


enum TransactionStatus {
  pending
  complete
  refunded
}

## Payment represents an amount
type Payment @model
@key(name: "byWallet", fields: ["walletId"])
@auth(rules: [
  
  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },

]) {
  id: ID!

  walletId: ID!
  
  name: String

  fee: Float

  isDefault: Boolean

  type: PaymentType

  description: String

  # This is the tokenized version of the payment.
  # for a crypt wallet, this would be the wallet address
  token: String
}


type Transaction @model
@auth(rules: [
  
  ## Owners can do everything
  { allow: owner, operations: [create, update, delete] },

  # Admin users can access any operation.
  { allow: groups, groups: ["admin"], operations: [create, update, delete] },

]) {
  id: ID!

  amount: Float
  status: TransactionStatus

  payment: Payment! @connection
  source: User! @connection
  destination: User! @connection
}
